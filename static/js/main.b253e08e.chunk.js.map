{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","sortByOptions","SearchBar","keyPressed","event","handleSearch","validateFun","term","location","setState","termError","locationError","sortBy","handleTermChange","bind","handleLocationChange","searchYelp","preventDefault","target","value","sortByOption","Object","keys","sortByOptionValue","onClick","handleSortByChange","getSortByClass","loading","renderSortByOptions","placeholder","onChange","onKeyPress","css","color","Yelp","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","scrollToMyRef","offsetTop","document","querySelector","window","scrollTo","myRef","createRef","promise","ref","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b253e08e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n    render(){\r\n        const {business} = this.props;\r\n        return (\r\n        <div className=\"Business\">\r\n            <div className=\"image-container\">\r\n                <img src={this.props.business.imageSrc} alt=''/>\r\n            </div>\r\n            <h2>{business.name}</h2>\r\n            <div className=\"Business-information\">\r\n                <div className=\"Business-address\">\r\n                    <p>{business.address}</p>\r\n                    <p>{business.city}</p>\r\n                    <p>{business.state} {business.zipCode}</p>\r\n                </div>\r\n                <div className=\"Business-reviews\">\r\n                    <h3>{business.category}</h3>\r\n                    <h3 className=\"rating\">{business.rating} stars</h3>\r\n                    <p>{business.reviewCount} reviews</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                {\r\n                    this.props.businesses.map(function(business) {\r\n                        return <Business key={business.id} business={business} />;\r\n                    })\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\nimport {BarLoader, ClipLoader, MoonLoader} from \"react-spinners\";\r\n\r\nconst sortByOptions = {\r\n    'Best Match': 'best_match',\r\n    'Highest Rated': 'rating',\r\n    'Most Reviewed': 'review_count'\r\n};\r\n\r\nconst barLoaderCss = `\r\n   position: absolute;\r\n   margin-top: 2.5rem;\r\n   left: calc(50% - 50px);\r\n   display: inline-block;\r\n    `;\r\n// left: calc(50% - 20px);\r\n// position: absolute;\r\n// width: 20px;\r\n// height: 20px;\r\n// left: calc(50% - 20px);\r\nclass SearchBar extends React.Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match',\r\n            termError: true,\r\n            locationError: true,\r\n        };\r\n\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.keyPressed = this.keyPressed.bind(this);\r\n        this.validateFun = this.validateFun.bind(this);\r\n    }\r\n    //call function when press Enter\r\n    keyPressed = event => {\r\n        if(event.key === 'Enter'){\r\n            this.handleSearch();\r\n        }\r\n    };\r\n    //check if input is empty\r\n    validateFun = () => {\r\n        const {term, location} = this.state;\r\n        if (!term && !location ){\r\n            this.setState({termError: false});\r\n            this.setState({locationError: false});\r\n        }\r\n\r\n        if (!term){\r\n            this.setState({termError: false});\r\n        }\r\n\r\n        if (!location){\r\n            this.setState({locationError: false});\r\n        }\r\n\r\n        if (term && !location ){\r\n            this.setState({termError: true});\r\n            this.setState({locationError: false});\r\n        }\r\n\r\n        if (!term && location ){\r\n            this.setState({termError: false});\r\n            this.setState({locationError: true});\r\n        }\r\n\r\n    };\r\n\r\n    handleSearch(event) {\r\n        const {term, location, sortBy} = this.state;\r\n\r\n\r\n        if(!term || !location){\r\n            this.validateFun();\r\n            return\r\n        }\r\n\r\n        if(term && location){\r\n            this.setState({termError: true});\r\n            this.setState({locationError: true});\r\n        }\r\n\r\n        this.props.searchYelp(term, location, sortBy);\r\n        event && event.preventDefault();\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value});\r\n    }\r\n\r\n    handleLocationChange(event) {\r\n        this.setState({location: event.target.value});\r\n    }\r\n\r\n    getSortByClass(sortByOption){\r\n        if (sortByOption === this.state.sortBy){\r\n            return 'active';\r\n        }\r\n        return '';\r\n        };\r\n    handleSortByChange(sortByOption){\r\n        this.setState({sortBy: sortByOption},() => {\r\n            this.handleSearch();\r\n        });\r\n    }\r\n\r\n\r\n    renderSortByOptions(){\r\n        return Object.keys(sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = sortByOptions[sortByOption];\r\n            return <li key={sortByOptionValue} onClick={this.handleSortByChange.bind(this, sortByOptionValue)} className={this.getSortByClass(sortByOptionValue)}>{sortByOption} </li>;\r\n        });\r\n    }\r\n    render (){\r\n        const {loading} = this.props;\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\" >\r\n                    <input className={this.state.termError ? '' : 'input'} placeholder=\"Search Businesses\" onChange={this.handleTermChange} onKeyPress={this.keyPressed}/>\r\n                    <input className={this.state.locationError ? '' : 'input'} placeholder=\"Where?\" onChange={this.handleLocationChange} onKeyPress={this.keyPressed}/>\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <a onClick={this.handleSearch}>Let's Go</a>\r\n                </div>\r\n                <div className=\"sweet-loading\">\r\n                    <BarLoader\r\n                        css = {barLoaderCss}\r\n                        color = {\"#cca353\"}\r\n                        loading={loading}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SearchBar;","const apiKey = \"A9YYPjKvfpu_n0Uyd597LRkQGFNbwIT7BHl7sf1WoOjpBfp3SSWt-q3X1jhgXJK4Z_80NLzwpDSfYt3oBhH46p8gRI-HfzPClZaVAyjWj-tf5jl9CIbUiH1S85h7X3Yx\";\r\n\r\n\r\nconst Yelp = {\r\n    searchYelp(term,location,sortBy){\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n            { headers: { Authorization: `Bearer ${apiKey}`}\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((jsonResponse) => {\r\n            if(jsonResponse.businesses){\r\n                return jsonResponse.businesses.map((business) => {\r\n                    return {\r\n                        id: business.id,\r\n                        imageSrc: business.image_url,\r\n                        name: business.name,\r\n                        address: business.location.address1,\r\n                        city: business.location.city,\r\n                        state: business.location.state,\r\n                        zipCode: business.location.zip_code,\r\n                        category: business.categories[0].title,\r\n                        rating: business.rating,\r\n                        reviewCount: business.review_count,\r\n                    }\r\n                });\r\n            }\r\n        })\r\n    }\r\n};\r\n\r\n\r\nexport default Yelp;\r\n\r\n","import React from 'react'\r\nimport './App.css';\r\nimport '../BusinessList/BusinessList';\r\nimport '../SearchBar/SearchBar';\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\nimport BusinessList from \"../BusinessList/BusinessList\";\r\nimport Yelp from \"../../util/Yelp\";\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            businesses: [],\r\n            loading: false,\r\n        };\r\n\r\n        this.searchYelp = this.searchYelp.bind(this);\r\n\r\n        this.myRef = React.createRef();\r\n    }\r\n\r\n    scrollToMyRef = () => {\r\n        const {offsetTop} = document.querySelector('.BusinessList');\r\n        window.scrollTo(0, offsetTop);\r\n    }\r\n\r\n    searchYelp(term,location,sortBy){\r\n        this.setState({loading: true});\r\n        const promise = Yelp.searchYelp(term,location,sortBy);\r\n        promise.then((businesses) => {\r\n            this.setState({\r\n                businesses: businesses,\r\n                loading: false,\r\n            });\r\n            this.scrollToMyRef();\r\n        });\r\n        return promise;\r\n    }\r\n\r\n    render() {\r\n        const {loading, businesses} = this.state;\r\n\r\n      return (\r\n          <div className=\"App\">\r\n              <h1>ravenous</h1>\r\n              <SearchBar\r\n                  searchYelp={this.searchYelp}\r\n                  loading={loading}\r\n              />\r\n              <BusinessList\r\n                  businesses={businesses}\r\n                  ref={this.myRef}\r\n              />\r\n          </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}